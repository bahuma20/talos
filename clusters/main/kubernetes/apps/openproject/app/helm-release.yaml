apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: openproject
  namespace: openproject
spec:
  interval: 15m
  chart:
    spec:
      chart: app-template
      version: 15.2.5
      sourceRef:
        kind: HelmRepository
        name: truecharts
        namespace: flux-system
  releaseName: openproject
  values:
    TZ: Europe/Berlin
    image:
      pullPolicy: Always
      repository: openproject/openproject
      tag: "16.2.0-slim"
    dbInitImage:
      pullPolicy: Always
      repository: postgres
      tag: 16
    securityContext:
      container:
        UMASK: "0022"
        readOnlyRootFilesystem: false
        runAsGroup: 0
        runAsNonRoot: false
        runAsUser: 0
    credentials:
      storj:
        type: s3
        name: storj
        url: https://gateway.storjshare.io
        accessKey: ${STORJ_ACCESS_KEY}
        secretKey: ${STORJ_SECRET_KEY}
        bucket: ${STORJ_BUCKET}
        encrKey: ${STORJ_VOLSYNC_ENCRYPTION_KEY}
        path: ""
    cnpg:
      main:
        enabled: true
        user: openproject
        database: openproject
        password: "${OPENPROJECT_POSTGRES_PASSWORD}"
        cluster:
          instances: 1
          singleNode: true
        mode: standalone
        backups:
          enabled: true
          credentials: storj
          retentionPolicy: "2d"
        recovery:
          method: object_store
          credentials: storj
    service:
      main:
        ports:
          main:
            port: 8080
    ingress:
      main:
        enabled: true
        hosts:
          - host: openproject.${BASE_DOMAIN}
            paths:
              - path: /
                pathType: Prefix
        integrations:
          certManager:
            enabled: true
            certificateIssuer: ${CERTMANAGER_ISSUER}
          traefik:
            enabled: true
            middlewares:
              - name: local
                namespace: traefik
          homepage:
            enabled: true
            group: Sonstiges
            name: "Open Project"
            widget:
              enabled: false
    resources: { }
    workload:
      main:
        podSpec:
          initContainers:
            wait-for-db:
              enabled: true
              type: init
              args:
                - bash
                - /app/docker/prod/wait-for-db
              env:
                DATABASE_URL: '{{ printf "postgresql://%s:%s@%s:5432/%s" .Values.cnpg.main.user  .Values.cnpg.main.creds.password (.Values.cnpg.main.creds.host | trimAll "\"") .Values.cnpg.main.database }}'
          containers:
            main:
              args:
                - /app/docker/prod/web
              env:
                DATABASE_URL: '{{ printf "postgresql://%s:%s@%s:5432/%s" .Values.cnpg.main.user  .Values.cnpg.main.creds.password (.Values.cnpg.main.creds.host | trimAll "\"") .Values.cnpg.main.database }}'
      seeder:
        enabled: true
        type: Job
        podSpec:
          initContainers:
            wait-db:
              enabled: true
              type: init
              imageSelector: dbInitImage
              command:
                - sh
                - "-c"
                - 'until pg_isready -h {{ .Values.cnpg.main.creds.host | trimAll "\"" }} -p 5432 -U {{ .Values.cnpg.main.user }}; do echo "waiting for database {{ .Values.cnpg.main.creds.host | trimAll "\"" }}:5432"; sleep 2; done;'
          containers:
            main:
              enabled: true
              primary: true
              args:
                - bash
                - /app/docker/prod/seeder
              probes:
                liveness:
                  enabled: false
                readiness:
                  enabled: false
                startup:
                  enabled: false
    persistence:
      assets:
        enabled: true
        mountPath: /var/openproject/assets
        readOnly: false
        targetSelector:
          seeder:
            main:
              mountPath: /var/openproject/assets
        volsync:
          - credentials: storj
            dest:
              enabled: false
            name: assets
            src:
              enabled: true
            type: restic
#      init-empty-tmp:
#        enabled: true
#        type: emptyDir
#        medium: Memory
#        size: 100Mi
#        targetSelector:
#          main:
#            wait-for-db:
#              mountPath: /tmp
      init-empty-app-tmp:
        enabled: true
        type: emptyDir
        medium: Memory
        size: 90Mi
        targetSelector:
          main:
            wait-for-db:
              mountPath: /app/tmp
      init-empty-seeder:
        enabled: true
        type: emptyDir
        medium: Memory
        size: 90Mi
        targetSelector:
          main:
            wait-for-db:
              mountPath: /app/tmp
