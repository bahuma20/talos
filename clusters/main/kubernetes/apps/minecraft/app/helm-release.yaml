apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: minecraft
  namespace: minecraft
spec:
  interval: 15m
  chart:
    spec:
      chart: minecraft-java
      version: 11.15.0
      sourceRef:
        kind: HelmRepository
        name: truecharts
        namespace: flux-system
  values:
    TZ: Europe/Berlin
    mcbackup:
      excludes:
        - "cache"
        - ".cache"
        - "logs"
        - "*.tmp"
    credentials:
      storj:
        type: s3
        name: storj
        url: https://gateway.storjshare.io
        accessKey: ${STORJ_ACCESS_KEY}
        secretKey: ${STORJ_SECRET_KEY}
        bucket: ${STORJ_BUCKET}
        encrKey: ${STORJ_VOLSYNC_ENCRYPTION_KEY}
        path: ""
    persistence:
      backups:
        enabled: false
      data:
        targetSelector:
          main:
            main:
              mountPath: /data
          backup:
            main:
              mountPath: /backup-source
              readOnly: true
      backup-target:
        enabled: true
        type: nfs
        server: ${NFS_HOST}
        path: /mnt/pool1/backup/backup-minecraft
        readOnly: false
        autoPermissions:
          enabled: false
        targetSelector:
          backup:
            main:
              mountPath: /backup-target
    service:
      main:
        annotations:
          "mc-router.itzg.me/defaultServer": "true"
          "mc-router.itzg.me/externalServerName": "craft.base.noitl.space"
    workload:
      main:
        type: StatefulSet
        podSpec:
          containers:
            main:
              env:
                TYPE: "PAPER"
                VERSION: "1.21.3"
                PAPER_BUILD: "82"
                MOTD: "Happy Noitln und Craften"
                SERVER_NAME: "Noitl.Craft"
                ENABLE_WHITELIST: true
                RCON_PASSWORD: ${MINECRAFT_RCON_PASSWORD}
                PVP: true
                MAX_WORLD_SIZE: ""
                MEMORY: 4096M
            mcbackup:
              enabled: false
      backup:
        enabled: true
        primary: false
        type: CronJob
        schedule: "0 3 * * *"
        concurrentPolicy:
        podSpec:
          restartPolicy: Never
          containers:
            main:
              enabled: true
              primary: true
              imageSelector: mcBackupImage
              probes:
                liveness:
                  enabled: false
                readiness:
                  enabled: false
                startup:
                  enabled: false
              env:
                SERVER_PORT: "{{ .Values.service.main.ports.main.port }}"
                RCON_HOST: '{{ printf "%s-rcon" (include "tc.v1.common.lib.chart.names.fullname" $) }}'
                RCON_PORT: "{{ .Values.service.rcon.ports.rcon.port }}"
                RCON_PASSWORD: "{{ .Values.workload.main.podSpec.containers.main.env.RCON_PASSWORD }}"
                SERVER_HOST: '{{ include "tc.v1.common.lib.chart.names.fullname" $ }}'
              command:
                - "sh"
                - "-c"
              args:
                - |
                  echo "RCON save-off"
                  rcon-cli save-off
                  echo "RCON save-all flush"
                  rcon-cli save-all flush
                  echo "Copying files from /backup-source to /backup-target"
                  rsync -avP --delete --exclude='.cache' --exclude='cache' --exclude='logs' --exclude='*.tmp' /backup-source/ /backup-target
                  echo "RCON save-on"
                  rcon-cli save-on
    resources: {}